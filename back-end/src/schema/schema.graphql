scalar Void

# Comments in GraphQL strings (such as this one) start with the hash (#) symbol.
# This "Book" type defines the queryable fields for every book in our data source.
type Book {
  title: String
  author: Author
}

type Author {
  name: String
  books: [Book]
}

enum Episode {
  private
  public
}

enum AccountType {
  admin
  user
}

type Place {
  id: String 
  name: String
  description: String
  location_type: String
  latitude: String
  longitude: String
  event_time: String
  event_type: Episode
  street: String
  city: String
  suburb: String
  country: String
  province: String
  code: String
}

type AccountDetails {
  id: String
  username: String
  name: String
  surname: String
  password: String
  email: String
  account_type: AccountType
}

type UserDetail {
  id: String
  username: String
  name: String
  surname: String
  email: String
  account_type: AccountType
}

type Bookmark {
  id: String
  name: String
  information: String
  creator_id: String
  location_id: String
}

type UserID {
  id: String
}

type SuccessfulHTTPResponse {
  status: String!,
  message: String!,
}

type BookmarkGroup {
  id: String,
  title: String,
  description: String,
  creator_id: String,
  timestamp: String,
}

type Bookmark {
  id: String,
  name: String,
  information: String,
  creator_id: String,
  location_id: String,
  timestamp: String,
}

# The "Query" type is special: it lists all of the available queries that
# clients can execute, along with the return type for each. In this
# case, the "books" query returns an array of zero or more Books (defined above).
type Query {
  getAllPlaces: [Place],
  getAllAccounts: [UserDetail],
  getAllBookmarks: [Bookmark],
  getAccount(id: String!): UserDetail,
  getPlace(id: String!): Place,
  allBookmarkGroups: [BookmarkGroup]
}

type Mutation {
  createAccount(email: String!, username: String!, password: String!, name: String, surname: String): UserDetail,
  deleteAccount(id: String!, email: String!): UserID,
  updateAccount(email: String!, username: String!, password: String!, name: String, surname: String): UserID,
  createBookmarkGroup(userID: String!, title: String, description: String): SuccessfulHTTPResponse,
  createBookmark(userID: String!, locationID: String!, groupID: String!): SuccessfulHTTPResponse,
}
